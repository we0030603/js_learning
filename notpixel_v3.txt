const url = "https://notpx.app/api/v1";
const newColors = ["#e46e6e", "#FFD635", "#7EED56", "#00CCC0", "#51E9F4", "#94B3FF", "#E4ABFF", "#FF99AA", "#FFB470", "#FFFFFF", "#FF9600", "#00CC78"];
const auth = readAccounts();

let overlayElement;



function clickButtonWithClass(className) {
    const xpath = `//button[contains(@class, "${className}")]`;
    const button = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
    if (button) {
        button.click();
        console.log("Button clicked successfully.");
    } else {
        console.log("Button not found.");
    }
}



function showOverlay(input) {
    if (overlayElement) {
        document.body.removeChild(overlayElement);
    }
    overlayElement = document.createElement('div');
    overlayElement.style.cssText = `
        position: fixed;
        inset: 0;
        background: rgba(255, 255, 255, 0.9);
        z-index: 20000;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 40pt;
        color: black;
    `;
    overlayElement.innerHTML = input;
    document.body.appendChild(overlayElement);
}


function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}


async function sleep() {
    console.log("ch·ªù 1s");
    await delay(1000);
}




function logMessage(message, color = "black") {
    const currentTime = new Date().toLocaleTimeString();
    console.log(`%c[${currentTime}] ${message}`, `color: ${color}`);
clickButtonWithClass("BrowserHeaderTabClose");
showOverlay(message);
}




async function fetchWithRetries(url, options, retries = 3, backoff = 300) {
    for (let i = 0; i < retries; i++) {
        try {
            const response = await fetch(url, options);
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            return await response.json();
        } catch (error) {
            if (i === retries - 1) throw error; // If it's the last attempt, throw the error
            await new Promise(res => setTimeout(res, backoff));
        }
    }
}




async function claim(header) {
    logMessage("Claiming resources", "cyan");
    try {
        await fetchWithRetries(`${url}/mining/claim`, { method: 'GET', headers: header });
    } catch (error) {
        logMessage(`Failed to claim resources: ${error}`, "red");
    }
}



async function paint(pixelId, newColor, header , auth) {
    const data = {
        pixelId: pixelId,
        newColor: newColor
    };

    try {
        for (let i = 0; i < 1; i++) {
            const response = await fetchWithRetries(`${url}/repaint/start`, {
                method: 'POST',
                headers: { ...header, 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });

            if (response.status === 400) {
                logMessage("Out of energy", "red");
                return false;
            }
            if (response.status === 401) {
                return -1;
            }

            logMessage(`Painted pixelId: ${pixelId} with color: ${newColor}`, "green");
            return true;
        }
    } catch (error) {
        logMessage(`Failed to paint: ${error}`, "red");
        return false;
    }
sleep();
}


function extractUsernameFromInitData(initData) {
    const decodedData = decodeURIComponent(initData);
    const usernameMatch = decodedData.match(/"username":"(.*?)"/);
    return usernameMatch ? usernameMatch[1] : "Unknown";
}


async function fetchMiningData(header) {
    try {
        const data = await fetchWithRetries(`${url}/mining/status`, { method: 'GET', headers: header });
        const userBalance = data.userBalance || 'Unknown';
        logMessage(`Balance: ${userBalance}`, "magenta");
    } catch (error) {
        logMessage(`Error fetching mining data: ${error}`, "red");
    }
}



async function main(auth) {
    const headers = { 'authorization': `initData ${auth}` };
    
    try {
        await fetchMiningData(headers);
        await claim(headers);
        let result;
        do {
            const pixelId = Math.floor(Math.random() * 1000000) + 1;
            const newColor = newColors[Math.floor(Math.random() * newColors.length)];

            result = await paint(pixelId, newColor, headers, auth);
        } while (result !== false && result !== -1);

        if (result === -1) {
            logMessage("DEAD :(", "red");
            console.log(headers["authorization"]);
        }
    } catch (error) {
        logMessage(`Network error in account ${auth}: ${error}`, "red");
    }
await fetchMiningData(headers);
}




async function processAccounts(auth) {
        const username = extractUsernameFromInitData(auth);
        logMessage(`--- STARTING SESSION FOR ACCOUNT: ${username} ---`, "blue");
        await main(auth);
}



function readAccounts() {
var iframeElement = document.getElementsByTagName('iframe')[0]; var srcValue = iframeElement.getAttribute('src').replace('=web', '=android'); if (srcValue.includes("query_id")) { var match = srcValue.match(/query_id.*?&tgWebApp/); if (match) { var output_str = match[0]; output_str = output_str.replace(/%3D/g, '=').replace(/%26/g, '&').replace(/%25/g, '%'); var processed_output_str = output_str.replace('&tgWebApp', ''); var kq = processed_output_str; } } else { var match = srcValue.match(/user%3D%257B%2522id.*?&tgWebApp/); if (match) { var output_str = match[0]; output_str = output_str.replace(/%3D/g, '=').replace(/%26/g, '&').replace(/%25/g, '%'); var processed_output_str = output_str.replace('&tgWebApp', ''); var tgWebAppData = processed_output_str; } } return tgWebAppData;

}




const accounts = await readAccounts();
await processAccounts(auth);


